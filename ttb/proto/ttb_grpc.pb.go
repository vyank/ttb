// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: ttb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketBookingClient is the client API for TicketBooking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketBookingClient interface {
	RegisterUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserId, error)
	PurchaseTicket(ctx context.Context, in *TicketPurchaseRequest, opts ...grpc.CallOption) (*TicketPurchaseResponse, error)
	GetTicketDetails(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*TicketDetailsResponse, error)
	ViewSeatAllocation(ctx context.Context, in *Section, opts ...grpc.CallOption) (*SeatAllocationResponse, error)
	RemoveUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUserBySeat(ctx context.Context, in *BookedSeat, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ModifySeat(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*TicketPurchaseResponse, error)
}

type ticketBookingClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketBookingClient(cc grpc.ClientConnInterface) TicketBookingClient {
	return &ticketBookingClient{cc}
}

func (c *ticketBookingClient) RegisterUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/ttb.TicketBooking/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingClient) PurchaseTicket(ctx context.Context, in *TicketPurchaseRequest, opts ...grpc.CallOption) (*TicketPurchaseResponse, error) {
	out := new(TicketPurchaseResponse)
	err := c.cc.Invoke(ctx, "/ttb.TicketBooking/PurchaseTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingClient) GetTicketDetails(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*TicketDetailsResponse, error) {
	out := new(TicketDetailsResponse)
	err := c.cc.Invoke(ctx, "/ttb.TicketBooking/GetTicketDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingClient) ViewSeatAllocation(ctx context.Context, in *Section, opts ...grpc.CallOption) (*SeatAllocationResponse, error) {
	out := new(SeatAllocationResponse)
	err := c.cc.Invoke(ctx, "/ttb.TicketBooking/ViewSeatAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingClient) RemoveUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ttb.TicketBooking/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingClient) RemoveUserBySeat(ctx context.Context, in *BookedSeat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ttb.TicketBooking/RemoveUserBySeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingClient) ModifySeat(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*TicketPurchaseResponse, error) {
	out := new(TicketPurchaseResponse)
	err := c.cc.Invoke(ctx, "/ttb.TicketBooking/ModifySeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketBookingServer is the server API for TicketBooking service.
// All implementations must embed UnimplementedTicketBookingServer
// for forward compatibility
type TicketBookingServer interface {
	RegisterUser(context.Context, *UserRequest) (*UserId, error)
	PurchaseTicket(context.Context, *TicketPurchaseRequest) (*TicketPurchaseResponse, error)
	GetTicketDetails(context.Context, *UserId) (*TicketDetailsResponse, error)
	ViewSeatAllocation(context.Context, *Section) (*SeatAllocationResponse, error)
	RemoveUser(context.Context, *UserId) (*emptypb.Empty, error)
	RemoveUserBySeat(context.Context, *BookedSeat) (*emptypb.Empty, error)
	ModifySeat(context.Context, *ModifySeatRequest) (*TicketPurchaseResponse, error)
	mustEmbedUnimplementedTicketBookingServer()
}

// UnimplementedTicketBookingServer must be embedded to have forward compatible implementations.
type UnimplementedTicketBookingServer struct {
}

func (UnimplementedTicketBookingServer) RegisterUser(context.Context, *UserRequest) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedTicketBookingServer) PurchaseTicket(context.Context, *TicketPurchaseRequest) (*TicketPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTicketBookingServer) GetTicketDetails(context.Context, *UserId) (*TicketDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketDetails not implemented")
}
func (UnimplementedTicketBookingServer) ViewSeatAllocation(context.Context, *Section) (*SeatAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewSeatAllocation not implemented")
}
func (UnimplementedTicketBookingServer) RemoveUser(context.Context, *UserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedTicketBookingServer) RemoveUserBySeat(context.Context, *BookedSeat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserBySeat not implemented")
}
func (UnimplementedTicketBookingServer) ModifySeat(context.Context, *ModifySeatRequest) (*TicketPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySeat not implemented")
}
func (UnimplementedTicketBookingServer) mustEmbedUnimplementedTicketBookingServer() {}

// UnsafeTicketBookingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketBookingServer will
// result in compilation errors.
type UnsafeTicketBookingServer interface {
	mustEmbedUnimplementedTicketBookingServer()
}

func RegisterTicketBookingServer(s grpc.ServiceRegistrar, srv TicketBookingServer) {
	s.RegisterService(&TicketBooking_ServiceDesc, srv)
}

func _TicketBooking_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttb.TicketBooking/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServer).RegisterUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBooking_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttb.TicketBooking/PurchaseTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServer).PurchaseTicket(ctx, req.(*TicketPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBooking_GetTicketDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServer).GetTicketDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttb.TicketBooking/GetTicketDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServer).GetTicketDetails(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBooking_ViewSeatAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Section)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServer).ViewSeatAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttb.TicketBooking/ViewSeatAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServer).ViewSeatAllocation(ctx, req.(*Section))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBooking_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttb.TicketBooking/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServer).RemoveUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBooking_RemoveUserBySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookedSeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServer).RemoveUserBySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttb.TicketBooking/RemoveUserBySeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServer).RemoveUserBySeat(ctx, req.(*BookedSeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBooking_ModifySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServer).ModifySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttb.TicketBooking/ModifySeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServer).ModifySeat(ctx, req.(*ModifySeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketBooking_ServiceDesc is the grpc.ServiceDesc for TicketBooking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketBooking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ttb.TicketBooking",
	HandlerType: (*TicketBookingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _TicketBooking_RegisterUser_Handler,
		},
		{
			MethodName: "PurchaseTicket",
			Handler:    _TicketBooking_PurchaseTicket_Handler,
		},
		{
			MethodName: "GetTicketDetails",
			Handler:    _TicketBooking_GetTicketDetails_Handler,
		},
		{
			MethodName: "ViewSeatAllocation",
			Handler:    _TicketBooking_ViewSeatAllocation_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _TicketBooking_RemoveUser_Handler,
		},
		{
			MethodName: "RemoveUserBySeat",
			Handler:    _TicketBooking_RemoveUserBySeat_Handler,
		},
		{
			MethodName: "ModifySeat",
			Handler:    _TicketBooking_ModifySeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ttb.proto",
}
